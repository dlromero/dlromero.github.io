using Newtonsoft.Json;
using SoftBottin.Models.Shoes;
using SoftBottinWS;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace SoftBottin.Controllers
{
    public class ShoesController : UtilitiesController
    {
        #region Zapatos
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [CompressFilter]
        public ActionResult Zapatos()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }

                cShoeType niShoeType = new cShoeType();
                DataSet dsShoesTypes = new DataSet();
                string sErrMessage = "";
                niShoeType.GetShoesTypes(out dsShoesTypes, out sErrMessage);

                List<SelectListItem> lsShoesTypes = new List<SelectListItem>();
                for (int iShoesTypes = 0; iShoesTypes < dsShoesTypes.Tables[0].Rows.Count; iShoesTypes++)
                {
                    SelectListItem slItem = new SelectListItem();
                    slItem.Text = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Name"].ToString();
                    slItem.Value = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Id"].ToString();
                    lsShoesTypes.Add(slItem);
                }
                ViewBag.lsShoesTypes = lsShoesTypes;
                return View();
            }
            catch (Exception)
            {

                return View();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="iIdShoeType"></param>
        /// <returns></returns>
        [CompressFilter]
        public JsonResult AjaxHandlerZapatos(int iIdShoeType)
        {
            if (!CheckSession())
            {
                return new JsonResult() { };
            }

            cShoe niShoe = new cShoe();
            DataSet dsShoes = new DataSet();
            string sErrMessage = "";
            niShoe.GetShoesByType(iIdShoeType, out dsShoes, out sErrMessage);

            List<cShoeTemp> lscShoe = new List<cShoeTemp>();

            if (dsShoes.Tables.Count > 0)
            {
                for (int iShoes = 0; iShoes < dsShoes.Tables[0].Rows.Count; iShoes++)
                {
                    cShoeTemp niShoeTemp = new cShoeTemp();
                    niShoeTemp.sIdProduct = dsShoes.Tables[0].Rows[iShoes]["IdProduct"].ToString();
                    niShoeTemp.sNameProduct = dsShoes.Tables[0].Rows[iShoes]["NameProduct"].ToString();
                    niShoeTemp.sDescriptionProduct = dsShoes.Tables[0].Rows[iShoes]["DescriptionProduct"].ToString();
                    niShoeTemp.sQuantityExisting = dsShoes.Tables[0].Rows[iShoes]["QuantityExisting"].ToString();
                    niShoeTemp.sQuantitySold = dsShoes.Tables[0].Rows[iShoes]["QuantitySold"].ToString();
                    niShoeTemp.sPurchasePrice = dsShoes.Tables[0].Rows[iShoes]["PurchasePrice"].ToString();
                    niShoeTemp.sSalePrice = dsShoes.Tables[0].Rows[iShoes]["SalePrice"].ToString();
                    niShoeTemp.sIdType = dsShoes.Tables[0].Rows[iShoes]["IdType"].ToString();
                    niShoeTemp.sIdProductDetail = dsShoes.Tables[0].Rows[iShoes]["IdProductDetail"].ToString();
                    niShoeTemp.sSize = dsShoes.Tables[0].Rows[iShoes]["Size"].ToString();
                    niShoeTemp.sQuantity = dsShoes.Tables[0].Rows[iShoes]["Quantity"].ToString();
                    niShoeTemp.sIdColor = dsShoes.Tables[0].Rows[iShoes]["IdColor"].ToString();
                    niShoeTemp.sColorDescription = dsShoes.Tables[0].Rows[iShoes]["ColorDescription"].ToString();
                    niShoeTemp.sRGB = dsShoes.Tables[0].Rows[iShoes]["RGB"].ToString();
                    niShoeTemp.sTypeDescription = dsShoes.Tables[0].Rows[iShoes]["TypeDescription"].ToString();
                    niShoeTemp.sImageBase64 = dsShoes.Tables[0].Rows[iShoes]["Imagebase64"].ToString();
                    lscShoe.Add(niShoeTemp);
                }
            }

            var jsonResult = Json(JsonConvert.SerializeObject(lscShoe), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = Int32.MaxValue;
            return jsonResult;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult CrearZapato()
        {
            try
            {

                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }

                Session.Remove("lsFilesFinal");

                cShoeType niShoeType = new cShoeType();
                DataSet dsShoesTypes = new DataSet();
                string sErrMessage = "";
                niShoeType.GetShoesTypes(out dsShoesTypes, out sErrMessage);

                List<SelectListItem> lsShoesTypes = new List<SelectListItem>();
                for (int iShoesTypes = 0; iShoesTypes < dsShoesTypes.Tables[0].Rows.Count; iShoesTypes++)
                {
                    SelectListItem slItem = new SelectListItem();
                    slItem.Text = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Name"].ToString();
                    slItem.Value = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Id"].ToString();
                    lsShoesTypes.Add(slItem);
                }

                cColor niColor = new cColor();
                DataSet dsColors = new DataSet();
                niColor.GetColors(out dsColors, out sErrMessage);


                List<SelectListItem> lsColors = new List<SelectListItem>();
                for (int iColors = 0; iColors < dsColors.Tables[0].Rows.Count; iColors++)
                {
                    SelectListItem slItem = new SelectListItem();
                    slItem.Text = dsColors.Tables[0].Rows[iColors]["Description"].ToString();
                    slItem.Value = dsColors.Tables[0].Rows[iColors]["Id"].ToString();
                    lsColors.Add(slItem);
                }



                ViewBag.lsShoesTypes = lsShoesTypes;
                ViewBag.lsColors = lsColors;


                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objShoe"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CrearZapato(cShoe objShoe)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }

                if (ModelState.IsValid)
                {
                    List<cShoeDetail> lscShoeType = JsonConvert.DeserializeObject<List<cShoeDetail>>(objShoe.sColorDetail);
                    List<cShoeImage> lsFilesFinal = new List<cShoeImage>();
                    if (Session["lsFilesFinal"] != null)
                    {
                        lsFilesFinal = (List<cShoeImage>)Session["lsFilesFinal"];
                    }
                    string sErrMessage = "";
                    cShoe niShoe = new cShoe();
                    int iIdInsert = 0, iIdDetailInsert = 0;
                    if (niShoe.AddShoe(objShoe.sName, objShoe.sDescription, objShoe.sRef, 0,
                                   0, objShoe.iCost, objShoe.iPrice, objShoe.iShoeType, lscShoeType,
                                   lsFilesFinal, out iIdInsert, out iIdDetailInsert, out sErrMessage))
                    {


                        #region Cargar correctamnete Zapatos
                        cShoeType niShoeType = new cShoeType();
                        DataSet dsShoesTypes = new DataSet();
                        niShoeType.GetShoesTypes(out dsShoesTypes, out sErrMessage);
                        List<SelectListItem> lsShoesTypes = new List<SelectListItem>();
                        for (int iShoesTypes = 0; iShoesTypes < dsShoesTypes.Tables[0].Rows.Count; iShoesTypes++)
                        {
                            SelectListItem slItem = new SelectListItem();
                            slItem.Text = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Name"].ToString();
                            slItem.Value = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Id"].ToString();
                            lsShoesTypes.Add(slItem);
                        }
                        ViewBag.lsShoesTypes = lsShoesTypes;
                        #endregion
                        Session.Remove("lsFilesFinal");
                        return View("Zapatos");
                    }
                    else
                    {
                        Session.Remove("lsFilesFinal");
                        return View("CrearZapatos");
                    }

                }
                return View();
            }
            catch (Exception ex)
            {
                Session.Remove("lsFilesFinal");
                return View();
            }
        }



        public ActionResult Imagenes()
        {
            if (!CheckSession())
            {
                return View("../Security/Principal");
            }
            return PartialView();
        }


        public JsonResult UploadFile()
        {
            try
            {
                if (!CheckSession())
                {
                    return new JsonResult() { };
                }
                List<cShoeImage> lsFilesFinal = new List<cShoeImage>();
                if (Session["lsFilesFinal"] != null)
                {
                    lsFilesFinal = (List<cShoeImage>)Session["lsFilesFinal"];
                }

                foreach (string item in Request.Files)
                {
                    cShoeImage nicShoeImage = new cShoeImage();

                    HttpPostedFileBase file = Request.Files[item] as HttpPostedFileBase;
                    string fileName = file.FileName;
                    string UploadPath = "~/Images/";

                    if (file.ContentLength == 0)
                        continue;
                    if (file.ContentLength > 0)
                    {
                        string path = Path.Combine(HttpContext.Request.MapPath(UploadPath), fileName);
                        string extension = Path.GetExtension(file.FileName);

                        byte[] data;
                        using (Stream inputStream = file.InputStream)
                        {
                            MemoryStream memoryStream = inputStream as MemoryStream;
                            if (memoryStream == null)
                            {
                                memoryStream = new MemoryStream();
                                inputStream.CopyTo(memoryStream);
                            }
                            data = memoryStream.ToArray();
                        }

                        nicShoeImage.bArrayImage = data;
                        nicShoeImage.sFileName = file.FileName;
                        nicShoeImage.sContentType = file.ContentType;

                        lsFilesFinal.Add(nicShoeImage);
                        //file.SaveAs(path);
                    }
                }
                Session["lsFilesFinal"] = lsFilesFinal;
                return Json("");

            }
            catch (Exception ex)
            {
                return Json("There is error try again later");
            }
        }



        public ActionResult Images()
        {
            string str = "
            byte[] bytes = new byte[str.Length * sizeof(char)];
            System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);

            byte[] imageData = bytes;
            return File(imageData, "image/jpeg");
        }

        #endregion

        #region Tipos de Zapatos
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult TiposZapatos()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }

                return View();
            }
            catch (Exception)
            {

                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult AjaxHandlerTiposZapatos()
        {
            if (!CheckSession())
            {
                return View("../Security/Principal");
            }

            cShoeType niShoeType = new cShoeType();
            DataSet dsShoesTypes = new DataSet();
            string sErrMessage = "";
            niShoeType.GetShoesTypes(out dsShoesTypes, out sErrMessage);

            List<string[]> lsShoesTypes = new List<string[]>();
            for (int iShoesTypes = 0; iShoesTypes < dsShoesTypes.Tables[0].Rows.Count; iShoesTypes++)
            {
                lsShoesTypes.Add(new string[] { dsShoesTypes.Tables[0].Rows[iShoesTypes]["Id"].ToString(),
                                                dsShoesTypes.Tables[0].Rows[iShoesTypes]["Name"].ToString(),
                                                dsShoesTypes.Tables[0].Rows[iShoesTypes]["Description"].ToString(),
                                                dsShoesTypes.Tables[0].Rows[iShoesTypes]["Ref"].ToString() });
            }
            return Json(new
            {
                sEcho = 1,
                iTotalRecords = 97,
                iTotalDisplayRecords = 3,
                aaData = lsShoesTypes
            },
            JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult CrearTipoZapato()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objShoeType"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CrearTipoZapato(cShoeType objShoeType)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                if (ModelState.IsValid)
                {
                    string sErrMessage = "";
                    cShoeType niShoeType = new cShoeType();
                    niShoeType.AddShoeType(objShoeType, out sErrMessage);
                    ViewBag.AddSuccefull = true;
                    return View("TiposZapatos");
                }
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult EditarTipoZapato()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }

                cShoeType niShoeType = new cShoeType();
                DataSet dsShoesTypes = new DataSet();
                string sErrMessage = "";
                niShoeType.GetShoesTypes(out dsShoesTypes, out sErrMessage);

                List<SelectListItem> lsShoesTypes = new List<SelectListItem>();
                for (int iShoesTypes = 0; iShoesTypes < dsShoesTypes.Tables[0].Rows.Count; iShoesTypes++)
                {
                    SelectListItem slItem = new SelectListItem();
                    slItem.Text = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Name"].ToString();
                    slItem.Value = dsShoesTypes.Tables[0].Rows[iShoesTypes]["Id"].ToString();
                    lsShoesTypes.Add(slItem);
                }
                ViewBag.lsShoesTypes = lsShoesTypes;
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="iIdShoeType"></param>
        /// <returns></returns>
        public JsonResult GetShoeById(int iIdShoeType)
        {
            try
            {
                if (!CheckSession())
                {
                    return new JsonResult() { };
                }
                cShoeType niShoeType = new cShoeType();
                cShoeType niResult = new cShoeType();
                string sErrMessage = "";
                niShoeType.GetShoesTypesById(iIdShoeType, out niResult, out sErrMessage);

                return Json(JsonConvert.SerializeObject(niResult), JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return new JsonResult() { };
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="objShoeType"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult EditarTipoZapato(cShoeType objShoeType)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                if (ModelState.IsValid)
                {
                    cShoeType niShoeType = new cShoeType();
                    string sErrMessage = "";
                    niShoeType.EditShoeType(objShoeType, out sErrMessage);
                    return View("TiposZapatos");
                }

                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="objShoeType"></param>
        /// <returns></returns>
        public ActionResult EliminarTipoZapato(int iShoeTypeId)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                if (ModelState.IsValid)
                {
                    cShoeType niShoeType = new cShoeType();
                    string sErrMessage = "";
                    niShoeType.DeleteShoeType(iShoeTypeId, out sErrMessage);
                    return View("TiposZapatos");
                }

                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }

        /// <summary>
        ///4  de Julio de 2016 Daniel Romero
        /// Metodo que permite dar de baja un zapato
        /// </summary>
        /// <returns></returns>
        public JsonResult ShoeOut(int iShoeId)
        {
            try
            {
                string sErrMsj = "";
                cShoe nicShoe = new cShoe();
                bool bResult = nicShoe.ShoeOut(iShoeId, out sErrMsj);
                return Json(bResult ? "ok" : sErrMsj, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                string sErrMsj = "";
                cUtilities.WriteLog(ex.Message, out sErrMsj);
                return Json("Error", JsonRequestBehavior.AllowGet);
            }


        }

        #endregion

        #region Colores
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult Colores()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }
        /// <summary>
        ///  Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para consultar los colores existentes
        /// </summary>
        /// <returns></returns>
        public ActionResult AjaxHandlerColores()
        {
            if (!CheckSession())
            {
                return View("../Security/Principal");
            }
            cColor niColores = new cColor();
            DataSet dsColors = new DataSet();
            string sErrMessage = "";
            niColores.GetColors(out dsColors, out sErrMessage);

            List<string[]> lsColors = new List<string[]>();
            for (int iColors = 0; iColors < dsColors.Tables[0].Rows.Count; iColors++)
            {
                lsColors.Add(new string[] { dsColors.Tables[0].Rows[iColors]["Id"].ToString(),
                                            dsColors.Tables[0].Rows[iColors]["Description"].ToString(),
                                           dsColors.Tables[0].Rows[iColors]["RGB"].ToString() });
            }

            return Json(new
            {
                sEcho = 1,
                iTotalRecords = 97,
                iTotalDisplayRecords = 3,
                aaData = lsColors
            },
            JsonRequestBehavior.AllowGet);

        }
        /// <summary>
        ///  Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para cargar la vista de creacion de color
        /// </summary>
        /// <returns></returns>
        public ActionResult CrearColor()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }
        /// <summary>
        /// Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para cargar crear un color
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult CrearColor(cColor objColor)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                if (ModelState.IsValid)
                {
                    string sErrMessage = "";
                    cColor niColor = new cColor();
                    niColor.AddColor(objColor, out sErrMessage);
                    ViewBag.AddSuccefull = true;
                    return View("Colores");
                }
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }
        /// <summary>
        /// Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para la vista de edicion de colores
        /// </summary>
        /// <returns></returns>
        public ActionResult EditarColor()
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                cColor niColor = new cColor();
                DataSet dsColors = new DataSet();
                string sErrMessage = "";
                niColor.GetColors(out dsColors, out sErrMessage);

                List<SelectListItem> lsColors = new List<SelectListItem>();
                for (int iColors = 0; iColors < dsColors.Tables[0].Rows.Count; iColors++)
                {
                    SelectListItem slItem = new SelectListItem();
                    slItem.Text = dsColors.Tables[0].Rows[iColors]["Description"].ToString();
                    slItem.Value = dsColors.Tables[0].Rows[iColors]["Id"].ToString();
                    lsColors.Add(slItem);
                }
                ViewBag.lsColors = lsColors;
                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }
        /// <summary>
        /// Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para editar un color
        /// </summary>
        /// <param name="objColor"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult EditarColor(cColor objColor)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                if (ModelState.IsValid)
                {
                    cColor niColor = new cColor();
                    string sErrMessage = "";
                    niColor.EditColor(objColor, out sErrMessage);
                    return View("Colores");
                }

                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }
        /// <summary>
        /// Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para traer los colores por id
        /// </summary>
        /// <param name="iIdColor"></param>
        /// <returns></returns>
        public JsonResult GetColorById(int iIdColor)
        {
            try
            {
                if (!CheckSession())
                {
                    return new JsonResult() { };
                }
                cColor niColor = new cColor();
                string sErrMessage = "";
                niColor.GetColorsById(iIdColor, out niColor, out sErrMessage);

                return Json(JsonConvert.SerializeObject(niColor), JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return new JsonResult() { };
            }
        }
        /// <summary>
        /// Daniel Romero 11 de Junio de 2016
        /// Metodo que se crea para eliminar un color por id
        /// </summary>
        /// <param name="objShoeType"></param>
        /// <returns></returns>
        public ActionResult EliminarColor(int iIdColor)
        {
            try
            {
                if (!CheckSession())
                {
                    return View("../Security/Principal");
                }
                if (ModelState.IsValid)
                {
                    cColor niColor = new cColor();
                    string sErrMessage = "";
                    niColor.DeleteColor(iIdColor, out sErrMessage);
                    return View("Colores");
                }

                return View();
            }
            catch (Exception)
            {
                return View();
            }
        }


        #endregion

    }
}